//Yuurand Functions v2.8.15

void UpdateGhostZH1_YR()
{
    UpdateEWeapons_YR();
    CleanUpGhostFFCs(); // Only needed if __GH_USE_DRAWCOMBO is 0
    UpdateGhostZHData1();
}

// Calls UpdateEWeapon() on every eweapon on the screen
void UpdateEWeapons_YR()
{
    eweapon wpn;
    
    // Only update behavior if Link isn't holding up an item.
    if(!(Link->Action==LA_HOLD1LAND || Link->Action==LA_HOLD2LAND ||
         Link->Action==LA_HOLD1WATER || Link->Action==LA_HOLD2WATER))
   {
        for(int i=Screen->NumEWeapons(); i>0; i--)
        {
            wpn=Screen->LoadEWeapon(i);
            
            // If this is a dummy, or if it's not a ghost.zh weapon, don't do anything
            if((wpn->Misc[__EWI_FLAGS]&__EWFI_IS_GHZH_EWPN)==0 ||
               (wpn->Misc[__EWI_FLAGS]&__EWFI_DUMMY)!=0)
                continue;

        
            UpdateEWeapon_YR(wpn);
        }
   }
   
   // If he is, just update appearance-related flags.
   else
   {
        for(int i=Screen->NumEWeapons(); i>0; i--)
        {
            wpn=Screen->LoadEWeapon(i);
            
            // If this is a dummy, or if it's not a ghost.zh weapon, don't do anything
            if((wpn->Misc[__EWI_FLAGS]&__EWFI_IS_GHZH_EWPN)==0 ||
               (wpn->Misc[__EWI_FLAGS]&__EWFI_DUMMY)!=0)
                continue;

        
            __UpdateEWeaponVisualFlags(wpn);
        }
   }
}

void Ghost_CheckHit_YR(ffc this, npc ghost)
{
     // Just got hit
    if(ghost->HP<Ghost_HP)
    {
        // Remember HP and start flashing
        __Ghost_InternalFlags|=__GHFI_GOT_HIT;
        Ghost_HP=ghost->HP;
        if(__Ghost_FlashCounter<__GH_FLASH_TIME)
            __Ghost_FlashCounter=__GH_FLASH_TIME;
        
        // Set knockback counter (but don't handle it yet)
        if(Ghost_FlagIsSet(GHF_KNOCKBACK))
        {
            int xDiff=Link->X-Ghost_X;
            int yDiff=Link->Y-Ghost_Y;
			int P2switch;
            
            // The correct way to find the knockback direction would be to check
            // the direction of the weapon, but that's not possible. Instead,
            // Link's position and direction are used.
            
			 if(G[G_MULTIPLAYER_ENABLED] == 1 && Distance(Ghost_X, Ghost_Y, Link->X, Link->Y) >Distance(Ghost_X, Ghost_Y, G[G_PLAYER_TWO_X], G[G_PLAYER_TWO_Y])){
				xDiff=G[G_PLAYER_TWO_X]-Ghost_X;
				yDiff=G[G_PLAYER_TWO_Y]-Ghost_Y;
				P2switch = 1;
			}
			
            // If Link is close, use his direction
            if(Abs(xDiff)<(Ghost_TileWidth+1)*16 && Abs(yDiff)<(Ghost_TileHeight+1)*16)
            {
				if(P2switch == 0){
					if((Link->Dir&10b)==(Ghost_Dir&10b) || Ghost_Dir>3 || // Both horizontal or vertical, or enemy diagonal?
					   Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
						__Ghost_KnockbackCounter=Link->Dir<<12|__GH_KNOCKBACK_TIME; // Direction and timer are stored together
				}
				else{
					if((G[G_PLAYER_TWO_DIR]&10b)==(Ghost_Dir&10b) || Ghost_Dir>3 || // Both horizontal or vertical, or enemy diagonal?
					   Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
						__Ghost_KnockbackCounter=G[G_PLAYER_TWO_DIR]<<12|__GH_KNOCKBACK_TIME; // Direction and timer are stored together
				}
            }
            
            // If Link is far, use the direction from him to the enemy
            else
            {
                // Up or down
                if(Abs(xDiff)<Abs(yDiff))
                {
                    if(Ghost_Dir==DIR_UP || Ghost_Dir==DIR_DOWN || Ghost_Dir>3 ||
                       Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
                    {
                        if(yDiff>0)
                            __Ghost_KnockbackCounter=(DIR_UP<<12)|__GH_KNOCKBACK_TIME;
                        else
                            __Ghost_KnockbackCounter=(DIR_DOWN<<12)|__GH_KNOCKBACK_TIME;
                    }
                }
                // Left or right
                else
                {
                    if(Ghost_Dir==DIR_LEFT || Ghost_Dir==DIR_RIGHT || Ghost_Dir>3 ||
                       Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
                    {
                        if(xDiff>0)
                            __Ghost_KnockbackCounter=(DIR_LEFT<<12)|__GH_KNOCKBACK_TIME;
                        else
                            __Ghost_KnockbackCounter=(DIR_RIGHT<<12)|__GH_KNOCKBACK_TIME;
                    }
                }
            }
        }
    }
    
    // Handle knockback
    if(__Ghost_KnockbackCounter!=0)
    {
        int dir=__Ghost_KnockbackCounter>>12;
        int counter=__Ghost_KnockbackCounter&4095;
        int step=__GH_KNOCKBACK_STEP;
        
        if(Ghost_FlagIsSet(GHF_REDUCED_KNOCKBACK))
            step/=2;
        
        // Get knocked back
        if(Ghost_CanMove(dir, step, __GH_DEFAULT_IMPRECISION))
        {
            int dX=0;
            int dY=0;
            
            counter--;
            if(counter>0)
                __Ghost_KnockbackCounter=(dir<<12)|counter;
            else
                __Ghost_KnockbackCounter=0;
            
            if(dir==DIR_UP)
                dY=-step;
            else if(dir==DIR_DOWN)
                dY=step;
            else if(dir==DIR_LEFT)
                dX=-step;
            else // Right
                dX=step;
            
            // Adjust all relevant position variables so this isn't mistaken for normal movement
            if(dX!=0)
            {
                Ghost_X+=dX;
                __Ghost_PrevX+=dX;
                Ghost_SetPosition(this, ghost);
            }
            else if(dY!=0)
            {
                Ghost_Y+=dY;
                __Ghost_PrevY+=dY;
                Ghost_SetPosition(this, ghost);
            }
        }
        
        // Can't move any farther; end knockback
        else
        {
            int newX=-1;
            int newY=-1;
            
            __Ghost_KnockbackCounter=0;
            __Ghost_InternalFlags|=__GHFI_KNOCKBACK_INTERRUPTED;
            
            if(dir==DIR_UP)
                newY=Floor(Ghost_Y/8)*8;
            else if(dir==DIR_DOWN)


                newY=Ceiling((Ghost_Y<<0)/8)*8;
            else if(dir==DIR_LEFT)
                newX=Floor(Ghost_X/8)*8;
            else // Right
                newX=Ceiling((Ghost_X<<0)/8)*8;
            
            if(newX!=-1)
            {
                __Ghost_PrevX+=newX-Ghost_X;
                Ghost_X=newX;
                Ghost_SetPosition(this, ghost);
            }
            else if(newY!=-1)
            {
                __Ghost_PrevY+=newY-Ghost_Y;
                Ghost_Y=newY;
                Ghost_SetPosition(this, ghost);
            }
        }
    }
}





const int EWL_NEAR_P2	   = 4;
// Update a weapon's movement, lifespan, and death effects
void UpdateEWeapon_YR(eweapon wpn)
{
    if((__ghzhData[__GHI_GLOBAL_FLAGS]&__GHGF_SUSPEND)!=0)
        return;
    
    // Needed for EWF_ROTATE_360
    int startX=wpn->X;
    int startY=wpn->Y;
    bool selfPropelled=true;

    // Is the weapon still active?
    if((wpn->Misc[__EWI_FLAGS]&__EWFI_DEAD)==0)
    {
        // Start movement updates
        if(wpn->Misc[__EWI_MOVEMENT]!=0)
        {
            // Split in half to reduce checks
            if(wpn->Misc[__EWI_MOVEMENT]<=EWM_RANDOM_REAIM)
            {
                if(wpn->Misc[__EWI_MOVEMENT]==EWM_SINE_WAVE)
                    __UpdateEWMSineWave(wpn);
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_HOMING)
                    __UpdateEWMHoming(wpn);
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_HOMING_REAIM)
                    __UpdateEWMHomingReaim(wpn);
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_RANDOM)
                    __UpdateEWMRandom(wpn);
                else // EWM_RANDOM_REAIM
                    __UpdateEWMRandomReaim(wpn);
            }
            else // wpn->Misc[__EWI_MOVEMENT]>EWM_RANDOM_REAIM
            {
                if(wpn->Misc[__EWI_MOVEMENT]==EWM_VEER)
                {
                    startX=wpn->Misc[__EWI_XPOS];
                    startY=wpn->Misc[__EWI_YPOS];
                    __UpdateEWMVeer(wpn);
                    selfPropelled=false;
                }
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_THROW)
                    __UpdateEWMThrow(wpn);
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_FALL)
                    __UpdateEWMFall(wpn);
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_DRIFT)
                {
                    startX=wpn->Misc[__EWI_XPOS];
                    startY=wpn->Misc[__EWI_YPOS];
                    __UpdateEWMDrift(wpn);
                    selfPropelled=false;
                }
		else if(wpn->Misc[__EWI_MOVEMENT]==EWM_HOMING_P2)
		{
                    __UpdateEWMHomingP2(wpn);
		}
                else if(wpn->Misc[__EWI_MOVEMENT]==EWM_HOMING_REAIM_P2)
		{
                    __UpdateEWMHomingReaimP2(wpn);
		}
                else //EWM_DRIFT_WAIT
                {
                    startX=wpn->Misc[__EWI_XPOS];
                    startY=wpn->Misc[__EWI_YPOS];
                    __UpdateEWMDriftWait(wpn);
                    selfPropelled=false;
                }
            }
        } // End movement updates
        
        
        // Start lifespan updates
        if(wpn->Misc[__EWI_LIFESPAN]!=0)
        {
            if(wpn->Misc[__EWI_LIFESPAN]==EWL_TIMER)
            {
                wpn->Misc[__EWI_LIFESPAN_ARG]-=1;
                if(wpn->Misc[__EWI_LIFESPAN_ARG]<=0)
                    KillEWeapon(wpn);
            }
            else if(wpn->Misc[__EWI_LIFESPAN]==EWL_NEAR_LINK)
            {
                if(Distance(wpn->X, wpn->Y, Link->X, Link->Y)<wpn->Misc[__EWI_LIFESPAN_ARG])
                    KillEWeapon(wpn);
            }
            else if(wpn->Misc[__EWI_LIFESPAN]==EWL_SLOW_TO_HALT)
            {
                wpn->Step=Max(0, wpn->Step-wpn->Misc[__EWI_LIFESPAN_ARG]);
                if(wpn->Step<=0)
                    KillEWeapon(wpn);
            }
			else if(wpn->Misc[__EWI_LIFESPAN]==EWL_NEAR_P2)
            {
                if(Distance(wpn->X, wpn->Y, G[G_PLAYER_TWO_X], G[G_PLAYER_TWO_Y])<wpn->Misc[__EWI_LIFESPAN_ARG])
                    KillEWeapon(wpn);
            }
        } // End lifespan updates
    }

    // Start death effects
    else if(wpn->Misc[__EWI_ON_DEATH]!=0 && (wpn->Misc[__EWI_FLAGS]&__EWFI_DEATH_EFFECT_DONE)==0)
    {
        if(wpn->Misc[__EWI_ON_DEATH]<0)
            __DoEWeaponDeathPrototype(wpn);

        // Split in half to reduce checks
        else if(wpn->Misc[__EWI_ON_DEATH]<8)
        {
            if(wpn->Misc[__EWI_ON_DEATH]==EWD_VANISH)
                wpn->DeadState=0;
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_AIM_AT_LINK)
                __DoEWeaponDeathAimAtLink(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_EXPLODE)
                __DoEWeaponDeathExplode(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_SBOMB_EXPLODE)
                __DoEWeaponDeathSBombExplode(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_4_FIREBALLS_HV)
                __DoEWeaponDeath4FireballsHV(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_4_FIREBALLS_DIAG)
                __DoEWeaponDeath4FireballsDiag(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_4_FIREBALLS_RANDOM)
                __DoEWeaponDeath4FireballsRand(wpn);
        }
        else // wpn->Misc[__EWI_ON_DEATH]>=8
        {
            if(wpn->Misc[__EWI_ON_DEATH]==EWD_8_FIREBALLS)
                __DoEWeaponDeath8Fireballs(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_4_FIRES_HV)
                __DoEWeaponDeath4FiresHV(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_4_FIRES_DIAG)
                __DoEWeaponDeath4FiresDiag(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_4_FIRES_RANDOM)
                __DoEWeaponDeath4FiresRand(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_8_FIRES)
                __DoEWeaponDeath8Fires(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_SPAWN_NPC)
                __DoEWeaponDeathSpawnNPC(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_FIRE)
                __DoEWeaponDeathSingleFire(wpn);
            else if(wpn->Misc[__EWI_ON_DEATH]==EWD_RUN_SCRIPT)
                __DoEWeaponDeathRunScript(wpn);
        }
    } // End death effects
    
    // Start flags

    if((wpn->Misc[__EWI_FLAGS]&EWF_SHADOW)!=0)
    {
        if(wpn->Z>0)
            DrawEWeaponShadow(wpn);
    }
    
    if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE_360)!=0)
    {
        wpn->DrawXOffset=1000;
        
        // Don't draw if Link is dead
        if(Link->HP<=0)
            return;
        
        // Flickering? Nothing to do here.
        if((wpn->Misc[__EWI_FLAGS]&EWF_FLICKER)!=0 &&
           (__ghzhData[__GHI_GLOBAL_FLAGS]&__GHGF_FLICKER)!=0)
            return;
        
        float endX;
        float endY;
        float angle;
        
        // Get the angle first
        if(wpn->Angular)
            angle=RadtoDeg(wpn->Angle);
        else
        {
            int dir=__NormalizeDir(wpn->Dir);
            
            if(dir==DIR_UP)
                angle=-90;
            else if(dir==DIR_RIGHTUP)
                angle=-45;
            else if(dir==DIR_RIGHT)
                angle=0;
            else if(dir==DIR_RIGHTDOWN)
                angle=45;
            else if(dir==DIR_DOWN)
                angle=90;
            else if(dir==DIR_LEFTDOWN)
                angle=135;
            else if(dir==DIR_LEFT)
                angle=180;
            else // DIR_LEFTUP
                angle=-135;
        }
        
        if(selfPropelled)
        {
            endX=wpn->X+wpn->Step/100*Cos(angle);
            endY=wpn->Y+wpn->Step/100*Sin(angle);
        }
        else
        {
            endX=wpn->Misc[__EWI_XPOS];
            endY=wpn->Misc[__EWI_YPOS];
        }
        
        // If the weapon's moving, use that angle instead of
        // wpn->Angle or wpn->Dir
        if(!(startX==endX && startY==endY))
            angle=Angle(startX, startY, endX, endY);
        
        int flip;
        if(angle>=0 && angle<180)
            flip=0;
        else
            flip=2;
        
        // Currently, these are always drawn on layer 4.
        // That should probably be changed...
        Screen->DrawTile(4, endX, endY-wpn->Z, wpn->Tile,
          wpn->TileWidth, wpn->TileHeight, wpn->CSet, -1, -1,
          endX, endY-wpn->Z, angle, flip, true, OP_OPAQUE);
    }
    else // EWF_ROTATE_360 isn't set
    {
        if((wpn->Misc[__EWI_FLAGS]&EWF_FLICKER)!=0)
        {
            // Weapons can't be made invisible; use DrawXOffset instead
            if((__ghzhData[__GHI_GLOBAL_FLAGS]&__GHGF_FLICKER)!=0)
                wpn->DrawXOffset=1000;
            else
                wpn->DrawXOffset=0;
        }
        
        if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0)
            SetEWeaponRotation(wpn);
    }
    
    if((wpn->Misc[__EWI_FLAGS]&EWF_FAKE_Z)!=0 || __GH_FAKE_EWEAPON_Z!=0)
    {
        // For some reason, DrawZOffset is also HitZOffset,
        // so Y offsets also have to be used.
        wpn->DrawZOffset=-wpn->Z;
        wpn->HitYOffset=-wpn->Z;
        wpn->DrawYOffset=-wpn->Z;
    }
    
    // End flags
}


//@Russ
//Ghost_CheckHit(this, ghost, G,  G_PLAYER_TWO_X, G_PLAYER_TWO_Y)
void Ghost_CheckHit(ffc this, npc ghost, int ptr, int indx_x, int indx_y)
{
    if(!(ptr>0)) 
    {
	    int ____err_no_array[]="Invalid array pointer passed to Ghost_CheckHit";
	    TraceS(____err_no_array); TraceNL();
	    return; //todo: 2.55, use IsValidArray
    }
    // Just got hit
    if(ghost->HP<Ghost_HP)
    {
        // Remember HP and start flashing
        __Ghost_InternalFlags|=__GHFI_GOT_HIT;
        Ghost_HP=ghost->HP;
        if(__Ghost_FlashCounter<__GH_FLASH_TIME)
            __Ghost_FlashCounter=__GH_FLASH_TIME;
        
        // Set knockback counter (but don't handle it yet)
        if(Ghost_FlagIsSet(GHF_KNOCKBACK))
        {
            int xDiff=Link->X-Ghost_X;
            int yDiff=Link->Y-Ghost_Y;
            
            // The correct way to find the knockback direction would be to check
            // the direction of the weapon, but that's not possible. Instead,
            // Link's position and direction are used.
		
	    if(Distance(Ghost_X, Ghost_Y, Link->X, Link->Y) >Distance(Ghost_X, Ghost_Y, ptr[indx_x], ptr[indx_y])){
				xDiff=ptr[indx_x]-Ghost_X;
				yDiff=ptr[indx_y]-Ghost_Y;
			}
            
            // If Link is close, use his direction
            if(Abs(xDiff)<(Ghost_TileWidth+1)*16 && Abs(yDiff)<(Ghost_TileHeight+1)*16)
            {
                if((Link->Dir&10b)==(Ghost_Dir&10b) || Ghost_Dir>3 || // Both horizontal or vertical, or enemy diagonal?
                   Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
                    __Ghost_KnockbackCounter=Link->Dir<<12|__GH_KNOCKBACK_TIME; // Direction and timer are stored together
            }
            
            // If Link is far, use the direction from him to the enemy
            else
            {
                // Up or down
                if(Abs(xDiff)<Abs(yDiff))
                {
                    if(Ghost_Dir==DIR_UP || Ghost_Dir==DIR_DOWN || Ghost_Dir>3 ||
                       Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
                    {
                        if(yDiff>0)
                            __Ghost_KnockbackCounter=(DIR_UP<<12)|__GH_KNOCKBACK_TIME;
                        else
                            __Ghost_KnockbackCounter=(DIR_DOWN<<12)|__GH_KNOCKBACK_TIME;
                    }
                }
                // Left or right
                else
                {
                    if(Ghost_Dir==DIR_LEFT || Ghost_Dir==DIR_RIGHT || Ghost_Dir>3 ||
                       Ghost_FlagIsSet(GHF_KNOCKBACK_4WAY))
                    {
                        if(xDiff>0)
                            __Ghost_KnockbackCounter=(DIR_LEFT<<12)|__GH_KNOCKBACK_TIME;
                        else
                            __Ghost_KnockbackCounter=(DIR_RIGHT<<12)|__GH_KNOCKBACK_TIME;
                    }
                }
            }
        }
    }
    
    // Handle knockback
    if(__Ghost_KnockbackCounter!=0)
    {
        int dir=__Ghost_KnockbackCounter>>12;
        int counter=__Ghost_KnockbackCounter&4095;
        int step=__GH_KNOCKBACK_STEP;
        
        if(Ghost_FlagIsSet(GHF_REDUCED_KNOCKBACK))
            step/=2;
        
        // Get knocked back
        if(Ghost_CanMove(dir, step, __GH_DEFAULT_IMPRECISION))
        {
            int dX=0;
            int dY=0;
            
            counter--;
            if(counter>0)
                __Ghost_KnockbackCounter=(dir<<12)|counter;
            else
                __Ghost_KnockbackCounter=0;
            
            if(dir==DIR_UP)
                dY=-step;
            else if(dir==DIR_DOWN)
                dY=step;
            else if(dir==DIR_LEFT)
                dX=-step;
            else // Right
                dX=step;
            
            // Adjust all relevant position variables so this isn't mistaken for normal movement
            if(dX!=0)
            {
                Ghost_X+=dX;
                __Ghost_PrevX+=dX;
                Ghost_SetPosition(this, ghost);
            }
            else if(dY!=0)
            {
                Ghost_Y+=dY;
                __Ghost_PrevY+=dY;
                Ghost_SetPosition(this, ghost);
            }
        }
        
        // Can't move any farther; end knockback
        else
        {
            int newX=-1;
            int newY=-1;
            
            __Ghost_KnockbackCounter=0;
            __Ghost_InternalFlags|=__GHFI_KNOCKBACK_INTERRUPTED;
            
            if(dir==DIR_UP)
                newY=Floor(Ghost_Y/8)*8;
            else if(dir==DIR_DOWN)


                newY=Ceiling((Ghost_Y<<0)/8)*8;
            else if(dir==DIR_LEFT)
                newX=Floor(Ghost_X/8)*8;
            else // Right
                newX=Ceiling((Ghost_X<<0)/8)*8;
            
            if(newX!=-1)
            {
                __Ghost_PrevX+=newX-Ghost_X;
                Ghost_X=newX;
                Ghost_SetPosition(this, ghost);
            }
            else if(newY!=-1)
            {
                __Ghost_PrevY+=newY-Ghost_Y;
                Ghost_Y=newY;
                Ghost_SetPosition(this, ghost);
            }
        }
    }
}


void __DoEWeaponDeathAimAtP2(eweapon wpn)
{
    wpn->Step=0;
    wpn->Misc[__EWI_ON_DEATH_ARG]-=1;
    if(wpn->Misc[__EWI_ON_DEATH_ARG]<=0)
    {
        wpn->Angle=RadianAngle(wpn->X, wpn->Y, G[G_PLAYER_TWO_X], G[G_PLAYER_TWO_Y]);
        SetEWeaponDir(wpn);
        wpn->Step=300;
        wpn->Misc[__EWI_ON_DEATH]=0;
    }
    // Spin while waiting
    wpn->Angle+=0.3;
    //return;
    //if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE_360)!=0 ||
    //   (wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0)
    //    wpn->Angle+=0.3;
    //else if(false)
    //{
    //    // Pick a direction based on the counter
    //    int dir=wpn->Misc[__EWI_ON_DEATH_ARG]&110b;
    //    if(dir==110b)
    //        SetEWeaponRotation(wpn, DIR_UP);
    //    else if(dir==100b)
    //        SetEWeaponRotation(wpn, DIR_RIGHT);
    //    else if(dir==010b)
    //        SetEWeaponRotation(wpn, DIR_DOWN);
    //    else
    //        SetEWeaponRotation(wpn, DIR_LEFT);
    //}
}

//@Russ
//__DoEWeaponDeathAimAtP2(wp, G, G_PLAYER_TWO_X, G_PLAYER_TWO_Y
void __DoEWeaponDeathAimAtP2(eweapon wpn, int ptr, int indx_x, int indx_y)
{
    if(!(ptr>0)) 
    {
	    int ____err_no_array[]="Invalid array pointer passed to __DoEWeaponDeathAimAtP2";
	    TraceS(____err_no_array); TraceNL();
	    return; //todo: 2.55, use IsValidArray
    }
    wpn->Step=0;
    wpn->Misc[__EWI_ON_DEATH_ARG]-=1;
    if(wpn->Misc[__EWI_ON_DEATH_ARG]<=0)
    {
        wpn->Angle=RadianAngle(wpn->X, wpn->Y, ptr[indx_x], ptr[indx_y]);
        SetEWeaponDir(wpn);
        wpn->Step=300;
        wpn->Misc[__EWI_ON_DEATH]=0;
    }
    // Spin while waiting
    wpn->Angle+=0.3;
    //return;
    //if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE_360)!=0 ||
    //   (wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0)
    //    wpn->Angle+=0.3;
    //else if(false)
    //{
        // Pick a direction based on the counter
    //    int dir=wpn->Misc[__EWI_ON_DEATH_ARG]&110b;
    //    if(dir==110b)
    //        SetEWeaponRotation(wpn, DIR_UP);
    //    else if(dir==100b)
    //        SetEWeaponRotation(wpn, DIR_RIGHT);
    //    else if(dir==010b)
    //        SetEWeaponRotation(wpn, DIR_DOWN);
    //    else
    //        SetEWeaponRotation(wpn, DIR_LEFT);
    //}
}

void __UpdateEWMHomingP2(eweapon wpn)
{
    // Wrap angle to 0..2*PI
    float currentAngle=wpn->Angle%6.2832;

    if(currentAngle<0)
        currentAngle+=6.2832;

    // Find angle to Link and wrap it
    float targetAngle=RadianAngle(wpn->X, wpn->Y, G[G_PLAYER_TWO_X], G[G_PLAYER_TWO_Y]);
    if(targetAngle<0)
        targetAngle+=6.2832;

    float diff=Abs(currentAngle-targetAngle);

    // Turn toward Link
    if(diff<wpn->Misc[__EWI_MOVEMENT_ARG] || diff>6.2832-wpn->Misc[__EWI_MOVEMENT_ARG])
        wpn->Angle=targetAngle;
    
    // Can't turn enough to point directly at him...
    else if(Sign(currentAngle-targetAngle)==Sign(diff-PI)) // current>target and diff>pi or
        wpn->Angle+=wpn->Misc[__EWI_MOVEMENT_ARG];         // current<target and diff<pi
    else                                                   // - Turn CW or CCW?
        wpn->Angle-=wpn->Misc[__EWI_MOVEMENT_ARG];

    SetEWeaponDir(wpn);
    
    // Decrement timer, unless it was negative to begin with
    if(wpn->Misc[__EWI_MOVEMENT_ARG_2]>0)
    {
        wpn->Misc[__EWI_MOVEMENT_ARG_2]--;
        if(wpn->Misc[__EWI_MOVEMENT_ARG_2]<=0)
            KillEWeapon(wpn);
    }
}

//@Russ
//__UpdateEWMHomingP2(eweapon wpn,(wpn, G, G_PLAYER_TWO_X, G_PLAYER_TWO_Y)
void __UpdateEWMHomingP2(eweapon wpn, int ptr, int indx_x, int indx_y)
{
    if(!(ptr>0)) 
    {
	    int ____err_no_array[]="Invalid array pointer passed to __UpdateEWMHomingP2";
	    TraceS(____err_no_array); TraceNL();
	    return; //todo: 2.55, use IsValidArray
    }
    // Wrap angle to 0..2*PI
    float currentAngle=wpn->Angle%6.2832;

    if(currentAngle<0)
        currentAngle+=6.2832;

    // Find angle to Link and wrap it
    float targetAngle=RadianAngle(wpn->X, wpn->Y, ptr[indx_x], ptr[indx_y]);
    if(targetAngle<0)
        targetAngle+=6.2832;

    float diff=Abs(currentAngle-targetAngle);

    // Turn toward Link
    if(diff<wpn->Misc[__EWI_MOVEMENT_ARG] || diff>6.2832-wpn->Misc[__EWI_MOVEMENT_ARG])
        wpn->Angle=targetAngle;
    
    // Can't turn enough to point directly at him...
    else if(Sign(currentAngle-targetAngle)==Sign(diff-PI)) // current>target and diff>pi or
        wpn->Angle+=wpn->Misc[__EWI_MOVEMENT_ARG];         // current<target and diff<pi
    else                                                   // - Turn CW or CCW?
        wpn->Angle-=wpn->Misc[__EWI_MOVEMENT_ARG];

    SetEWeaponDir(wpn);
    
    // Decrement timer, unless it was negative to begin with
    if(wpn->Misc[__EWI_MOVEMENT_ARG_2]>0)
    {
        wpn->Misc[__EWI_MOVEMENT_ARG_2]--;
        if(wpn->Misc[__EWI_MOVEMENT_ARG_2]<=0)
            KillEWeapon(wpn);
    }
}

void __UpdateEWMHomingReaimP2(eweapon wpn)
{
    // Set time before re-aiming
    if(wpn->Misc[__EWI_WORK]==0)
        wpn->Misc[__EWI_WORK]=wpn->Misc[__EWI_MOVEMENT_ARG_2];

    if(wpn->Misc[__EWI_WORK]>0) // If positive, wpn is moving

    {

        wpn->Misc[__EWI_WORK]--;
        if(wpn->Misc[__EWI_WORK]==0)
        {
            if(wpn->Misc[__EWI_MOVEMENT_ARG]<=0) // No more aims left
                KillEWeapon(wpn);

            else // Stop
            {
                wpn->Misc[__EWI_MOVEMENT_ARG]--;
                wpn->Step=0;
                wpn->Misc[__EWI_WORK]=-20;
            }
        }
    }
    else // If negative, it's stopped to aim
    {
        wpn->Misc[__EWI_WORK]++;
        if(wpn->Misc[__EWI_WORK]==0) // Start up again
        {
            wpn->Misc[__EWI_WORK]=45;
            wpn->Angle=RadianAngle(wpn->X, wpn->Y, G[G_PLAYER_TWO_X], G[G_PLAYER_TWO_Y]);
            wpn->Step=wpn->Misc[__EWI_WORK_2];
            SetEWeaponDir(wpn);
            if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0) // TODO: No longer needed?
                SetEWeaponRotation(wpn);
        }
        // Spin in place while waiting
        if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE_360)!=0)
            wpn->Angle+=0.3;
        else if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0)
        {
            wpn->Angle+=0.2;
            // Pick the direction based on the timer
            int dir=-wpn->Misc[__EWI_WORK]&110b;
            
            if(dir==110b)
                SetEWeaponRotation(wpn, DIR_UP);
            else if(dir==100b)
                SetEWeaponRotation(wpn, DIR_RIGHT);
            else if(dir==010b)
                SetEWeaponRotation(wpn, DIR_DOWN);
            else
                SetEWeaponRotation(wpn, DIR_LEFT);
        }
    }
}

//@Russ
//__UpdateEWMHomingReaimP2(eweapon wpn,(wpn, G, G_PLAYER_TWO_X, G_PLAYER_TWO_Y)
void __UpdateEWMHomingReaimP2(eweapon wpn, int ptr, int indx_x, int indx_y)
{
    if(!(ptr>0)) 
    {
	    int ____err_no_array[]="Invalid array pointer passed to __UpdateEWMHomingReaimP2";
	    TraceS(____err_no_array); TraceNL();
	    return; //todo: 2.55, use IsValidArray
    }
    // Set time before re-aiming
    if(wpn->Misc[__EWI_WORK]==0)
        wpn->Misc[__EWI_WORK]=wpn->Misc[__EWI_MOVEMENT_ARG_2];

    if(wpn->Misc[__EWI_WORK]>0) // If positive, wpn is moving

    {

        wpn->Misc[__EWI_WORK]--;
        if(wpn->Misc[__EWI_WORK]==0)
        {
            if(wpn->Misc[__EWI_MOVEMENT_ARG]<=0) // No more aims left
                KillEWeapon(wpn);

            else // Stop
            {
                wpn->Misc[__EWI_MOVEMENT_ARG]--;
                wpn->Step=0;
                wpn->Misc[__EWI_WORK]=-20;
            }
        }
    }
    else // If negative, it's stopped to aim
    {
        wpn->Misc[__EWI_WORK]++;
        if(wpn->Misc[__EWI_WORK]==0) // Start up again
        {
            wpn->Misc[__EWI_WORK]=45;
            wpn->Angle=RadianAngle(wpn->X, wpn->Y, ptr[indx_x], ptr[indx_y]);
            wpn->Step=wpn->Misc[__EWI_WORK_2];
            SetEWeaponDir(wpn);
            if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0) // TODO: No longer needed?
                SetEWeaponRotation(wpn);
        }
        // Spin in place while waiting
        if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE_360)!=0)
            wpn->Angle+=0.3;
        else if((wpn->Misc[__EWI_FLAGS]&EWF_ROTATE)!=0)
        {
            wpn->Angle+=0.2;
            // Pick the direction based on the timer
            int dir=-wpn->Misc[__EWI_WORK]&110b;
            
            if(dir==110b)
                SetEWeaponRotation(wpn, DIR_UP);
            else if(dir==100b)
                SetEWeaponRotation(wpn, DIR_RIGHT);
            else if(dir==010b)
                SetEWeaponRotation(wpn, DIR_DOWN);
            else
                SetEWeaponRotation(wpn, DIR_LEFT);
        }
    }
}

